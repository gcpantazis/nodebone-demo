
var	Backbone = require('backbone'),
	_ = require('underscore');

var NodeClass = Backbone.NodeClass = function(options) {
	this.cid = _.uniqueId('NodeClass');
	this._configure(options || {});
	this.initialize.apply(this, arguments);
};

var classOptions = ['attributes'];

_.extend(NodeClass.prototype, null, {

	initialize: function(){},

	_configure: function(options) {
		if (this.options) options = _.extend({}, this.options, options);
		for (var i = 0, l = classOptions.length; i < l; i++) {
			var attr = classOptions[i];
			if (options[attr]) this[attr] = options[attr];
		}
		this.options = options;
	}

});

var extend = function (protoProps, classProps) {
	var child = inherits(this, protoProps, classProps);
	child.extend = this.extend;
	return child;
};

NodeClass.extend = extend;

var ctor = function(){};

var inherits = function(parent, protoProps, staticProps) {

	var child;

	if (protoProps && protoProps.hasOwnProperty('constructor')) {
		child = protoProps.constructor;
	} else {
		child = function(){ parent.apply(this, arguments); };
	}

	_.extend(child, parent);

	ctor.prototype = parent.prototype;
	child.prototype = new ctor();

	if (protoProps) _.extend(child.prototype, protoProps);
	if (staticProps) _.extend(child, staticProps);

	child.prototype.constructor = child;
	child.__super__ = parent.prototype;

	return child;
};
